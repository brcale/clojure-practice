(ns clojure-test.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; Rekurzija
(defn rekurzija []
  (loop [i 0]
    (when (< i 5)
      (println i)
      (recur (inc i)))))
(rekurzija)

;; igranje sa listom
(def Lista '(1 2 3 4 5))
(println Lista)
(cons "first" Lista) ; dodaj "first" na pocetak liste
(println Lista)
(println (rest Lista)) ; println sve osim prvog elementa


;; niz se kreira sa []

(def niz-brojeva [1 2 3 4 5])

(println "Niz brojeva " niz-brojeva)


(def niz-stringova ["1" "2" "3" "cetiri" "pet"])

(println "Niz stringova " niz-brojeva)

;;lista se kreira sa '() ili (list ...)

(def lista '(1 2 3 4))
(println "Lista je " lista)

(def lista-2 (list "1" 2 "tri" [1 2 3]))

(println "Mogu sadrzavat sve tipove podataka " lista-2)

;;mapa se krira sa {}

(def first-map {:kljuc "vrijednost"})
(println "First map is " first-map)

(def second-map {:name "Bruno" :lastname "Cale" :address {:kvart "Trnava" :number 23}})

(println "Mapa sadrzi kljuc i vrijednost " second-map)

;;DOHVACANJE PODATAKA IZ MAPE

(println "IME JE " (get second-map :name))
;; ILI SKRACENO
(println "Ime je " (:name second-map))
;;DOHVATI ULICU
(println "KVART JE " (:kvart (:address second-map))) ;; (:address second-map) vraÄ‡a {:kvart "Trnava" :numver 23} i onda iz toga se uzme kvart
;;;;;
;;;;
;;;;
;;;;
(def data [{:name "Bruno" :lastname "lastname1"}
            {:name "John" :lastname "lastname2"}
            {:name "Leon" :lastname "lastname3"}])

(println "Data je niz objekata (mapa) " data)

;;LET 
(defn fun-let-usage []
(let [varijabla "vrijednost dostupna samo unutar funkcije"
      varijabla-2 [1 2 3 4]]
(println varijabla)))

(fun-let-usage)

;; 3 vrste funkcija:::: sa imenom (defn name-of-fun []...) i anonimne: (fn [ele] (println "Argument fun je " ele)) ili #(println "Argument fun je " %)
;;POVRATNA VRIJEDNSOT FUNKCIJE JE ZADNJA NAREDBA U FUNKCIJI

(defn asd []
(let [aa (map #(string? %) [1 "2" 3])]
aa))

(println (asd))

(defn asd-drugi-nacin []
(let [aa (map (fn [ele] (string? ele)) [1 "2" 3])]
aa))

(println (asd-drugi-nacin))

;;

(defn get-names-from-data []
(let [names (map (fn [item] (:name item)) data)]
names))

(println "NAMES ARE " (get-names-from-data))
;


(defn get-only-first-element [data-obj]
(first data-obj))

(println (get-only-first-element ["prvi" "drugi" "treci"]))


(defn get-only-last-element [data-obj]
(last data-obj))

(println (get-only-last-element ["prvi" "drugi" "treci"]))




;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to myproject"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of myproject"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of myproject"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of myproject")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About myproject"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About myproject"]]]
       [page]
       [:footer
        [:p "myproject was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))